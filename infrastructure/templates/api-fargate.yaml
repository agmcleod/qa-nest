Description: >

  This template deploys the ECS infrastructure to run our API service. It deploys
  an Application Load Balancer and listener to target our ECS cluster running the
  API as an ECS Fargate service. To support database schema migrations, an
  additional ECS task is deployed with a migration script command; this task can
  be run as a one-off task manually or as part of a deployment pipeline.

Parameters:
  EnvironmentName:
    Type: String
    AllowedValues:
      - staging
      - production
      - development

  DesiredCount:
    Type: Number
    Default: 1

  ContainerPort:
    Type: Number
    Default: 8080

  ImageTag:
    Type: String
    Description: Docker image tag to deploy
    Default: latest

  # SslCertsStack:
  #   Type: String
  #   Description: Name of the SSL certificates stack

  EcrStack:
    Type: String
    Description: Name of the ECR registry stack

  SgStack:
    Type: String
    Description: Name of the security groups stack for this environment

  VpcStack:
    Type: String
    Description: Name of the VPC stack for this environment

  DbStack:
    Description: Name of the stack containing the Postgres database
    Type: String

  RolesStack:
    Description: The stack for the Task roles
    Type: String

Mappings:
  # Referenced from table on: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html
  RegionalConfigurations:
    ca-central-1:
      ELBAccountId: 985666609251

Conditions:
  IsNotStaging: !Equals [!Ref EnvironmentName, production]

Resources:
  # S3 Bucket & Policy for ELB to write logs. Excluded for staging
  LogsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'oasis-api-load-balance-logs-${EnvironmentName}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  LogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LogsBucket
      PolicyDocument:
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${LogsBucket}/*'
            Principal:
              AWS:
                Fn::Sub:
                  - 'arn:aws:iam::${AccountId}:root'
                  - AccountId:
                      Fn::FindInMap:
                        - RegionalConfigurations
                        - !Ref AWS::Region
                        - ELBAccountId

  # Load Balancer
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - LogsBucket
      - LogsBucketPolicy
    Properties:
      Subnets: !Split
        - ','
        - Fn::ImportValue: !Sub '${VpcStack}-PublicSubnets'
      SecurityGroups:
        - Fn::ImportValue: !Sub '${SgStack}-LoadBalancerSecurityGroup'
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: !If
            - IsNotStaging
            - true
            - false
        - Key: access_logs.s3.bucket
          Value: !Ref LogsBucket

  # LoadBalancerListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 443
  #     Protocol: HTTPS
  #     Certificates:
  #       - CertificateArn:
  #           Fn::ImportValue: !Sub '${SslCertsStack}-ApiCertificateArn'
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref TargetGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      VpcId:
        Fn::ImportValue: !Sub '${VpcStack}-VpcId'
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /status
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  # ECS Cluster

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref AWS::StackName

  # ECS Service: API

  ApiService:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref ApiTaskDefinition
      LaunchType: FARGATE
      ServiceName: !Sub ${EnvironmentName}-api
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue: !Sub '${SgStack}-ECSHostSecurityGroup'
          Subnets: !Split
            - ','
            - Fn::ImportValue: !Sub '${VpcStack}-PrivateSubnets'
      LoadBalancers:
        - ContainerName: api-service
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  ApiTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-api-service
      RequiresCompatibilities:
        - FARGATE
      Memory: 512
      Cpu: 256
      NetworkMode: awsvpc
      TaskRoleArn:
        Fn::ImportValue: !Sub '${RolesStack}-TaskRoleArn'
      ExecutionRoleArn:
        Fn::ImportValue: !Sub '${RolesStack}-TaskExecutionRoleArn'
      ContainerDefinitions:
        - Name: api-service
          Essential: true
          Image: !Join
            - ':'
            - - Fn::ImportValue: !Sub '${EcrStack}-RepositoryUrl'
              - !Ref ImageTag
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: NODE_ENV
              Value: !Ref EnvironmentName
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: TYPEORM_DATABASE
              Value: postgres
            - Name: TYPEORM_ENTITIES
              Value: dist/**/*.entity{.ts,.js}
            - Name: TYPEORM_HOST
              Value:
                Fn::ImportValue: !Sub '${DbStack}-DBEndpoint'
            - Name: TYPEORM_USERNAME
              Value:
                Fn::ImportValue: !Sub '${DbStack}-DBUsername'

          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub ${AWS::StackName}-ApiService
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: api-service

  ApiServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-ApiService
      RetentionInDays: 30

Outputs:
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub '${AWS::StackName}-LoadBalancerDNSName'
